<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[python使用技巧——常用第三方库]]></title>
      <url>/2017/10/16/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93/</url>
      <content type="html"><![CDATA[<p></p><h5>PS：</h5><br>先自我批评一波，代码这东西，真的是几天不碰就生疏了，没有超强的记忆力，没有充足的时间，还是得温故而知新，之前写的一些，如果不常回顾，只能越来越菜<p></p>
<img src="/2017/10/16/python使用技巧——常用第三方库/1.bmp" alt="1.bmp" title="">
<p></p><h5>下面记录几个库及部分方法</h5><p></p>
<p></p><h4>win32api,win32con</h4><br>模拟键盘输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">def input_passwd():</div><div class="line">    win32api.keybd_event(97, 0, 0, 0)</div><div class="line">    win32api.keybd_event(97, 0, win32con.KEYEVENTF_KEYUP, 0)</div><div class="line">    win32api.keybd_event(98, 0, 0, 0)</div><div class="line">    win32api.keybd_event(98, 0, win32con.KEYEVENTF_KEYUP, 0)</div><div class="line">    win32api.keybd_event(99, 0, 0, 0)</div><div class="line">    win32api.keybd_event(99, 0, win32con.KEYEVENTF_KEYUP, 0)</div><div class="line">    win32api.keybd_event(100, 0, 0, 0)</div><div class="line">    win32api.keybd_event(100, 0, win32con.KEYEVENTF_KEYUP, 0)</div><div class="line">    win32api.keybd_event(101, 0, 0, 0)</div><div class="line">    win32api.keybd_event(101, 0, win32con.KEYEVENTF_KEYUP, 0)</div><div class="line">    win32api.keybd_event(102, 0, 0, 0)</div><div class="line">    win32api.keybd_event(102, 0, win32con.KEYEVENTF_KEYUP, 0)</div><div class="line">    win32api.keybd_event(103, 0, 0, 0)</div><div class="line">    win32api.keybd_event(103, 0, win32con.KEYEVENTF_KEYUP, 0)</div><div class="line">    win32api.keybd_event(104, 0, 0, 0)</div><div class="line">    win32api.keybd_event(104, 0, win32con.KEYEVENTF_KEYUP, 0)</div></pre></td></tr></table></figure><p></p>
<p>附:键位对应表</p>
<img src="/2017/10/16/python使用技巧——常用第三方库/2.bmp" alt="2.bmp" title="">
<p></p><h4>文件操作</h4><p></p>
<p></p><h5>创建空文件 fp = open(path+”test.txt”,w)</h5><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">w      以写方式打开</div><div class="line">a      以追加模式打开 (从 EOF 开始, 必要时创建新文件) </div><div class="line">r+     以读写模式打开 </div><div class="line">w+     以读写模式打开 </div><div class="line">a+     以读写模式打开</div><div class="line">rb     以二进制读模式打开 </div><div class="line">wb     以二进制写模式打开 </div><div class="line">ab     以二进制追加模式打开 </div><div class="line">rb+    以二进制读写模式打开 </div><div class="line">wb+    以二进制读写模式打开 </div><div class="line">ab+    以二进制读写模式打开</div><div class="line"></div><div class="line">fp.read([size])     </div><div class="line">fp.readline([size])</div><div class="line">fp.readlines([size])</div><div class="line">fp.write(str) </div><div class="line">fp.writelines(seq)  </div><div class="line">fp.close()</div></pre></td></tr></table></figure><p></p>
<p></p><h5>删除</h5><br>删除文件：<br>os.remove()<p></p>
<p>删除空目录：<br>os.rmdir()</p>
<p>递归删除空目录：<br>os.removedirs()</p>
<p></p><h5>PS：</h5><br>其它的用到再百度或记录吧<p></p>
<p></p><h4>openpyxl</h4>读取excel表格<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#read_xlsx</span></div><div class="line">    def read_xlsx(self):</div><div class="line">        <span class="comment">#解决编码格式问题</span></div><div class="line">        reload(sys)</div><div class="line">        sys.setdefaultencoding(<span class="string">'utf-8'</span>)</div><div class="line">        wb = load_workbook(filename=souce_path,read_only=True)</div><div class="line">        ws = wb[<span class="string">'Sheet1'</span>]</div><div class="line">        self.que=[]</div><div class="line">        self.ans=[]</div><div class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> ws.rows:</div><div class="line">            que_ans=[]</div><div class="line">            <span class="keyword">for</span> cell <span class="keyword">in</span> row:</div><div class="line">                a = cell.value</div><div class="line">                <span class="keyword">if</span> a == None:</div><div class="line">                    a = <span class="string">" "</span></div><div class="line">                que_ans.append(str(a))</div><div class="line">            self.que.append(que_ans[0])</div><div class="line">            self.ans.append(que_ans[1])</div><div class="line"><span class="comment">#create_xlsx</span></div><div class="line">    def create_xlsx(self,xlsx_path):</div><div class="line">        wb = Workbook()</div><div class="line">        ws = wb.active</div><div class="line">        ws.title = <span class="string">"ans"</span></div><div class="line">        ws.cell(row=1,column=1).value=<span class="string">'ask_question'</span></div><div class="line">        ws.cell(row=1,column=2).value=<span class="string">'ask_anwser'</span></div><div class="line">        ws.cell(row=1,column=4).value=<span class="string">'ques_in_db'</span></div><div class="line">        ws.cell(row=1,column=5).value=<span class="string">'ans_in_db'</span></div><div class="line">        ws.cell(row=1,column=7).value=<span class="string">'keys'</span></div><div class="line">        ws.cell(row=1,column=9).value=<span class="string">'select_text'</span></div><div class="line">        wb.save(xlsx_path)</div><div class="line"></div><div class="line">    def write_xlsx(self,xlsx_path):</div><div class="line">        wb=load_workbook(xlsx_path)</div><div class="line">        ws =wb.active</div><div class="line">        ws.title = <span class="string">"result"</span></div><div class="line">        font = Font(color=<span class="string">'FF0000'</span>)</div><div class="line">        alignment=Alignment(horizontal=<span class="string">'left'</span>)</div><div class="line">        fill = PatternFill(start_color=<span class="string">'FF0000'</span>,end_color=<span class="string">'FF0000'</span>,fill_type=<span class="string">'solid'</span>,patternType=<span class="string">'solid'</span>)</div><div class="line">        self.getcof = get_conifg()</div><div class="line">        get_token(self.getcof[1],self.getcof[0],self.getcof[2],self.getcof[3])</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(self.que)):</div><div class="line">            self.gta = get_ans(self.que[i],self.getcof[2])</div><div class="line">            ws.cell(row=i+2,column=1).value=self.que[i]</div><div class="line">            ws.cell(row=i+2,column=2).value=self.ans[i]</div><div class="line">            ws.cell(row=i+2,column=4).value=self.gta[0]</div><div class="line">            ws.cell(row=i+2,column=5).value=self.gta[1]</div><div class="line">            ws.cell(row=i+2,column=7).value=self.gta[2]</div><div class="line">            ws.cell(row=i+2,column=9).value=self.gta[3]</div><div class="line">        <span class="comment">#wb.save(xlsx_path)</span></div><div class="line">            <span class="keyword">if</span> self.que[i] != self.gta[0] :</div><div class="line">                ws.cell(row=i+2,column=4).fill=fill</div><div class="line">            <span class="keyword">if</span> self.que[i] != self.gta[3] :</div><div class="line">                ws.cell(row=i+2,column=9).fill=fill</div><div class="line">            <span class="keyword">if</span> self.ans[i] != self.gta[1] :</div><div class="line">                ws.cell(row=i+2,column=5).fill=fill</div><div class="line">                ws.cell(row=i+2,column=7).fill=fill</div><div class="line">        wb.save(xlsx_path)</div></pre></td></tr></table></figure><p></p>
<p></p><h4>requests</h4><br>接口请求<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">get:</div><div class="line">r = requests.get(url,params=&#123;<span class="string">'account'</span>:self.usr[i], <span class="string">'tel'</span>:self.tel[i], <span class="string">'area_code'</span>:self.area[i]&#125;)</div><div class="line"></div><div class="line">post:</div><div class="line">json:</div><div class="line"></div><div class="line">headers = &#123;<span class="string">'content-type'</span>: <span class="string">'application/json'</span>,</div><div class="line">           <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0'</span>&#125;</div><div class="line">r = requests.post(url, data=json.dumps(&#123;<span class="string">"mac"</span>:<span class="string">"00:50:56:21:b2:c9"</span>,<span class="string">"datas"</span>:[&#123;<span class="string">"uid"</span>:<span class="string">"1"</span>,<span class="string">"devid"</span>:<span class="string">"user1"</span>,<span class="string">"alias"</span>:<span class="string">"陶然"</span>,<span class="string">"updatetime"</span>:<span class="string">"2017-08-25 15:28:12"</span>,<span class="string">"createtime"</span>:<span class="string">""</span>,<span class="string">"erase"</span>:<span class="string">"1"</span>,<span class="string">"owner_id"</span>:<span class="string">"0"</span>&#125;,&#123;<span class="string">"uid"</span>:<span class="string">"18"</span>,<span class="string">"devid"</span>:<span class="string">"2c09f432df88325bf5f5697df35b729a"</span>,<span class="string">"alias"</span>:<span class="string">"小黄机"</span>,<span class="string">"updatetime"</span>:<span class="string">"2017-06-30 11:48:49"</span>,<span class="string">"createtime"</span>:<span class="string">""</span>,<span class="string">"erase"</span>:<span class="string">"0"</span>,<span class="string">"owner_id"</span>:<span class="string">"0"</span>&#125;]&#125;)</div><div class="line">                  ,headers=headers)</div><div class="line"><span class="built_in">print</span>(r.text)</div><div class="line"><span class="built_in">print</span>(r.status_code)</div></pre></td></tr></table></figure><p></p>
<p></p><h4>tkFileDialog</h4><br>gui编程<p></p>
<p>python3.0以上版本可以用辅助工具PyQt designer pytqt5实现</p>
<p>python2.7 手动编程调试</p>
<p>主要是建造框架，对应按键进行函数方法设计，里面还有很多小细节。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#GUI Fram</span></div><div class="line">class Application(Frame):</div><div class="line">    def __init__(self, master):</div><div class="line">        Frame.__init__(self, master)</div><div class="line">        self.root=master</div><div class="line">        self.root.geometry(<span class="string">'650x580'</span>)</div><div class="line">        self.root.resizable(0, 0)</div><div class="line">        self.root.title(<span class="string">'语义系统接口自动化工具v2.0  create by Tanghuimeng '</span>)</div><div class="line"><span class="comment">#UI design</span></div><div class="line">    def createWidgets(self):</div><div class="line">        self.fram_top = Frame(self.root, width=650, height=188, <span class="built_in">bg</span>=<span class="string">'#C1CDCD'</span>)</div><div class="line">		........</div><div class="line">		self.fram_top.grid(row=0, column=0)</div><div class="line">		Label(self.fram_top, text=<span class="string">'请输入用户名:'</span>,<span class="built_in">bg</span>=<span class="string">'#C1CDCD'</span>).grid(row=0, column=0, sticky=NW,padx=10, pady=5)</div><div class="line">		Entry(self.fram_top, width=60, textvariable=self.v1).grid(row=0, column=1, sticky=NW, padx=20, pady=5)</div><div class="line">		Button(self.fram_top, text=<span class="string">'测试连接'</span>, <span class="built_in">command</span>=self.test_connect, <span class="built_in">bg</span>=<span class="string">'#C1CDCD'</span>).grid(row=1, column=2, sticky=NW, padx=16,</div><div class="line">                                                                                pady=0)</div><div class="line">		self.text_msg1 = Text(self.fram_cen, width=90,height=3,<span class="built_in">bg</span>=<span class="string">'#C1CDCD'</span>)</div><div class="line">        self.text_msg1.grid(sticky=NW, padx=11, pady=5)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    f = open(http.path+<span class="string">'\\result\\'</span> + <span class="string">'run_log.txt'</span>, <span class="string">'w'</span>)</div><div class="line">    <span class="comment">#sys.stderr = f</span></div><div class="line">    <span class="comment">#sys.stdout = f</span></div><div class="line">    root =Tk()</div><div class="line">    app = Application(root)</div><div class="line">    app.createWidgets()</div><div class="line">    app.mainloop()</div><div class="line">    f.close()</div></pre></td></tr></table></figure>
<p></p><h4>redis</h4><br>数据库<p></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">r1 = redis.StrictRedis(host=self.cof[0],port=6278,password=<span class="string">'xx'</span>,encoding=<span class="string">'utf-8'</span>)</div></pre></td></tr></table></figure>
<p></p><h4>mysql</h4><br>数据库<p></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">import MySQLdb</div><div class="line">coon = MySQLdb.connect(host=<span class="string">'xx'</span>,user=<span class="string">'root'</span>,passwd=<span class="string">'xx'</span>,port=3306,db=<span class="string">'backup_database'</span>)</div><div class="line">coon.select_db(<span class="string">'backup_database'</span>)</div><div class="line">cur=coon.cursor()</div><div class="line">cur.execute(<span class="string">'select * from user_info_S1 limit 5'</span>)</div><div class="line">result=cur.fetchall()</div><div class="line">resultlist=list(result)</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> 转载请注明出处 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Python使用技巧——path（路径）获取、pyinstaller打包]]></title>
      <url>/2017/10/11/Python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E2%80%94%E2%80%94path%EF%BC%88%E8%B7%AF%E5%BE%84%EF%BC%89%E8%8E%B7%E5%8F%96/</url>
      <content type="html"><![CDATA[<p></p><h3>获取path的方法</h3><br>程序中方法很多，最常见的<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sys.path[0] +<span class="string">'\\'</span></div></pre></td></tr></table></figure><p></p>
<p>然而，如果程序打包成文件夹，此方法不会有问题，但是如果打包成一个exe文件，则需要另外的方法，因为sys.path[0]获取的当前运行缓存区的路径，方法如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">file_path=os.path.abspath(sys.argv[0])</div><div class="line">path_list=file_path.split(<span class="string">'\\'</span>)</div><div class="line">path_list.pop()</div><div class="line">path=<span class="string">'\\'</span>.join(path_list)</div></pre></td></tr></table></figure></p>
<p></p><h3>pyinstaller 说明</h3><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyinstaller [参数] [脚本路径]</div></pre></td></tr></table></figure><p></p>
<p>该参数包括：</p>
<p>-F, –onefile Py代码只有一个文件</p>
<p>-D, –onedir Py代码放在一个目录中（默认是这个）</p>
<p>-K, –tk 包含TCL/TK</p>
<p>-d, –debug 生成debug模式的exe文件</p>
<p>-w, –windowed, –noconsole 窗体exe文件(WindowsOnly)</p>
<p>-c, –nowindowed, –console 控制台exe文件(WindowsOnly)</p>
<p>-X, –upx 使用upx压缩exe文件</p>
<p>-o DIR, –out=DIR 设置spec文件输出的目录，默认在PyInstaller同目录</p>
<p>-v FILE, –version=FILE 加入版本信息文件</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[服务器Apache对某一网站响应过慢记录]]></title>
      <url>/2017/09/28/%E6%9C%8D%E5%8A%A1%E5%99%A8Apache%E5%AF%B9%E6%9F%90%E4%B8%80%E7%BD%91%E7%AB%99%E5%93%8D%E5%BA%94%E8%BF%87%E6%85%A2%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>你以为这是一篇性能调优博客？No 其实这只是一份吐槽~</p>
<p>问题描述：公司网站（运营系统）进入后一段时间访问速度奇慢，刚刷新进入时并不会出现此现象</p>
<p>针对此问题做了很多调试工作，最后原因是php 写入数据库时，插入数据失败，此时应该是无法获取token而退出，由于链接写死的原因，导致无法弹出已到期的提示。</p>
<p>吐槽完毕，顺便记录知识点：（既然是调试过，自然查询了很多东西）</p>
<p></p><h4>1. yum相关</h4><br>安装、卸载apapche ,openssl ,php 相关<br>这个比较简单<p></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install xxxx</div></pre></td></tr></table></figure>
<p>卸载openssl</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum remove openssl</div></pre></td></tr></table></figure>
<p>目前来说是可以正常卸载的，相对于依赖包 影响不大</p>
<p></p><h4>2. 系统命令相关</h4><br>查看httpd 线程数<p></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps -aux | grep httpd | wc -l</div></pre></td></tr></table></figure>
<p>查看连接数和当前整体连接数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">netstat -ant | grep <span class="variable">$ip</span>:80 | wc -l </div><div class="line">netstat -ant | grep <span class="variable">$ip</span>:80 | grep EST | wc -l</div></pre></td></tr></table></figure></p>
<p></p><h4>3. 其它</h4><br>老实说其它的关于apache调优的网上还有很多 不过大致都就一篇的复制体，以后有用到再说吧<br><img src="/2017/09/28/服务器Apache对某一网站响应过慢记录/wc.jpg" alt="wc.jpg" title=""><p></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo + Github 搭建记录]]></title>
      <url>/2017/09/26/Hexo-Github-%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>记录Hexo + Github 搭建个人博客具体操作（虽然教程很多，但坑也很多，只能取其优而适用于己）</p>
<p></p><h2> 划重点 </h2><p></p>
<p></p><h3> 1. 首先是github 个人项目的创建 </h3><br>注意点：项目名要求为用户名.github.io <p></p>
<img src="/2017/09/26/Hexo-Github-搭建记录/project.png" alt="project.png" title="">
<p>eg:LitteTang.github.io</p>
<p></p><h3>2. git 工具安装 并连接到github项目上</h3><br>命令行输入： $ ssh-keygen -t rsa -C greenovia@qq.com（换成你的邮箱地址）<br>回车跳过接下来的步骤 直到生成公钥<p></p>
<p>打开id_rsa.pub文件将一整串公钥拷贝下来<br>进入你的github账户设置，在ssh and GPG keys中新增一个ssh key</p>
<p>验证ssh key：</p>
<p>$ ssh -T git@github.com</p>
<p></p><h3>3. node.js 安装</h3><br>这个直接下载并安装最新node.js 就行<p></p>
<p></p><h3>4. hexo 的安装与配置</h3><p></p>
<h5>国内安装太慢，采用淘宝镜像 的cnpm</h5>

<p>$npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="external">https://registry.npm.taobao.org</a></p>
<p>$ cnpm install -g hexo-cli</p>
<p>$ cnpm install hexo –save</p>
<p>最后验证是否安装成功：$ hexo -v</p>
<p>之后在一个空的文件夹下运行：$ hexo init</p>
<p>然后会提示缺少文件 提示你：npm install</p>
<p>这个时候只能用：cnpm install来代替</p>
<h5>之后通过git 连接到远程github 仓库</h5>

<p>首先更改 _config.yml文件</p>
<img src="/2017/09/26/Hexo-Github-搭建记录/deploy.png" alt="deploy.png" title="">
<p>设置git身份信息</p>
<p>$ git config –global user.name “你的用户名”</p>
<p>$ git config –global user.email “你的邮箱”</p>
<p>安装hexo git插件</p>
<p>$ cnpm install hexo-deployer-git –save</p>
<h5>发布并更新到github上</h5><br>$ hexo c<br><br>$ hexo g<br><br>$ hexo d<br><br>hexo d -g 生成并上传<br><br>hexo s -g 本地生成并预览<br><br>由于hexo默认会把所有md文件都转换成html，包括README.md，所以：<br><br>更改_config.yml 中  skip_render: README.md<br><br>这就安装成功了，剩下的也是比较耗时的一部分，主题的配置，重点还是在记录上面，但是这也不能少啊（<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a> ）下载中意的主题，然后放入 ..\themes\目录下<br><br>更改_config.yml中的theme: landscape 的值<br><br>剩下的主题的_config.yml中的更改 跟进对应的readme.md 文档来进行<br><br><h3>hexo 博客创建发表</h3><br>$ hexo new “标题名”<br><br>进入对应目录，修改md文件 （兼容html格式）<br><br><h5>插入图片方法：</h5>

<p>有两种方法，第一种是不用插件的情况，第二种是使用一种hexo的插件。</p>
<p>无论哪种方法都有一个共同的前提：修改_config.yml配置文件<strong>post_asset_folder</strong>项为<strong>true</strong></p>
<p>第一种方法：</p>
<img src="/2017/09/26/Hexo-Github-搭建记录/mathor.png" alt="mathor.png" title="">
<p>第二种方法：</p>
<p>安装 cnpm install hexo-asset-image –save</p>
<p>重点 这个是坑人的  导致图片均无法打开，应对办法 ，卸载  无法卸载</p>
<p><strong>最后解决办法</strong></p>
<p>直接删除，文件路径 \node_modules\hexo-asset-image</p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/09/25/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
    
  
</search>
